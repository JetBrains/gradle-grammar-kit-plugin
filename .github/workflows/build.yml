name: Build
on:
  # Trigger the workflow on pushes to only the 'master' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [master]
    paths-ignore: ['**.md', '.teamcity/**']
  # Trigger the workflow on any pull request
  pull_request:
    paths-ignore: ['**.md', '.teamcity/**']


# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  XDG_CACHE_HOME: "~/.config/"

jobs:

  gradleValidation:
    name: Gradle Wrapper
    runs-on: ubuntu-latest
    steps:

      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v2.0.1

  codeInspection:
    name: Code Inspection
    needs: gradleValidation
    runs-on: ubuntu-latest
    steps:

      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2023.3.1

  test:
    name: Gradle ${{ matrix.gradleVersion }} @ ${{ matrix.os }}
    needs: gradleValidation
    runs-on: ${{ matrix.os }}
    permissions:
      checks: write
    strategy:
      fail-fast: false
      matrix:
        gradleVersion:
          - "7.4"
          - "7.6.2"
          - "8.3"
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
        include:
          - os: ubuntu-latest
            script: |
              sudo rm -rf /usr/share/dotnet
              sudo rm -rf /usr/local/lib/android
              sudo rm -rf /opt/ghc

    steps:

      - name: Run OS-dedicated script
        if: ${{ matrix.script }}
        run: ${{ matrix.script }}

      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      - name: Run Tests
        run: ./gradlew check -PtestGradleVersion="${{ matrix.gradleVersion }}" ${{ runner.os == 'Windows' && '-PtestGradleUserHome="C:\\testGradleHome"' || '' }}

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: ${{ always() }}
        with:
          name: "Unit Tests Report: Gradle ${{ matrix.gradleVersion }} @ ${{ matrix.os }}"
          path: "**/build/test-results/*/TEST-*.xml"
          reporter: java-junit

      - name: Collect Test Results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.gradleVersion }}-${{ runner.os }}
          path: |
            ${{ github.workspace }}/build/reports/tests/test/
            ${{ github.workspace }}/build/reports/configuration-cache

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:

      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Cache XDG_CACHE_HOME
        uses: actions/cache@v4
        with:
          path: ${{ env.XDG_CACHE_HOME }}
          key: ${{ runner.os }}-XDG_CACHE_HOME-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-XDG_CACHE_HOME-

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^name:" | cut -f2- -d ' ')"
          ARTIFACT="$NAME-$VERSION.jar"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build Plugin
        run: ./gradlew build -x test

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.properties.outputs.artifact }}
          path: ./build/libs/${{ steps.properties.outputs.artifact }}

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )"
